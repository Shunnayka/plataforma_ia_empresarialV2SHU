from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
import json
from django.views.decorators.csrf import csrf_exempt

# Importaciones CORREGIDAS
from .models import ConversacionTutor, RespuestaPredefinida
from cursos.models import Modulo

@login_required
def chat_tutor(request, modulo_id=None):
    modulo = None
    if modulo_id:
        modulo = get_object_or_404(Modulo, id=modulo_id)
    
    conversaciones = ConversacionTutor.objects.filter(
        usuario=request.user
    ).order_by('-fecha')[:10]
    
    return render(request, 'tutor_ia/chat.html', {
        'modulo': modulo,
        'conversaciones': conversaciones
    })

@login_required
@csrf_exempt
def enviar_pregunta(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            pregunta = data.get('pregunta', '').strip()
            modulo_id = data.get('modulo_id')
            
            if not pregunta:
                return JsonResponse({'error': 'La pregunta no puede estar vac√≠a'}, status=400)
            
            modulo = None
            if modulo_id:
                try:
                    modulo = Modulo.objects.get(id=modulo_id)
                except Modulo.DoesNotExist:
                    pass
            
            # Usa tu funci√≥n generar_respuesta original
            respuesta = generar_respuesta(pregunta, modulo, request.user)
            
            conversacion = ConversacionTutor.objects.create(
                usuario=request.user,
                modulo=modulo,
                pregunta=pregunta,
                respuesta=respuesta
            )
            
            return JsonResponse({
                'respuesta': respuesta,
                'fecha': conversacion.fecha.strftime('%d/%m/%Y %H:%M')
            })
            
        except Exception as e:
            return JsonResponse({'error': 'Error interno del servidor'}, status=500)
    
    return JsonResponse({'error': 'M√©todo no permitido'}, status=405)

@login_required
@csrf_exempt
def borrar_conversacion(request):
    if request.method == 'POST':
        try:
            # Borrar todas las conversaciones del usuario
            conversaciones_borradas = ConversacionTutor.objects.filter(
                usuario=request.user
            ).delete()
            
            return JsonResponse({
                'success': True,
                'message': f'Se borraron {conversaciones_borradas[0]} conversaciones'
            })
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': 'Error al borrar la conversaci√≥n'
            }, status=500)
    
    return JsonResponse({'error': 'M√©todo no permitido'}, status=405)

# PEGA AQU√ç TU FUNCI√ìN generar_respuesta ORIGINAL COMPLETA
def generar_respuesta(pregunta, modulo, usuario):
    pregunta_lower = pregunta.lower().strip()
    
    # ===== 1. SALUDOS Y CORTES√çAS =====
    saludos = ['hola', 'holi', 'hey', 'hi', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'qu√© tal', 'qu√© hubo']
    if any(saludo in pregunta_lower for saludo in saludos):
        return "¬°Hola! üëã Soy tu tutor IA. Puedo ayudarte con:\n‚Ä¢ Tu progreso y √°reas a mejorar\n‚Ä¢ Explicaci√≥n de temas\n‚Ä¢ Resultados de diagn√≥sticos\n‚Ä¢ Consejos de aprendizaje\n‚Ä¢ C√≥mo usar la plataforma\n\n¬øEn qu√© te puedo ayudar hoy?"
    
    # ===== 2. DESPEDIDAS =====
    despedidas = ['adi√≥s', 'chao', 'bye', 'nos vemos', 'hasta luego', 'gracias', 'thx', 'ty']
    if any(despedida in pregunta_lower for despedida in despedidas):
        return "¬°Ha sido un gusto ayudarte! üòä Recuerda que estoy aqu√≠ cuando necesites. ¬°Mucho √©xito en tu aprendizaje! üöÄ"
    
    # ===== 3. PROGRESO Y √ÅREAS A MEJORAR =====
    if any(palabra in pregunta_lower for palabra in ['mejorar', '√°reas', 'd√©bil', 'fortaleza', 'progreso', 'avance', 'c√≥mo voy', 'c√≥mo estoy', 'debo mejorar', 'qu√© me falta']):
        from cursos.utils import obtener_ruta_aprendizaje
        from evaluaciones.models import DiagnosticoInicial
        
        ruta_aprendizaje = obtener_ruta_aprendizaje(usuario)
        diagnosticos = DiagnosticoInicial.objects.filter(usuario=usuario, completado=True)
        
        if ruta_aprendizaje:
            modulos_alta = [r.modulo_recomendado for r in ruta_aprendizaje if r.prioridad == 1]
            modulos_media = [r.modulo_recomendado for r in ruta_aprendizaje if r.prioridad == 2]
            
            respuesta = ""
            
            if modulos_alta:
                respuesta += f"üéØ **√Åreas cr√≠ticas para mejorar (Alta prioridad)**:\n"
                for modulo in modulos_alta:
                    # Verificar si ya hizo diagn√≥stico
                    diag = diagnosticos.filter(modulo=modulo).first()
                    puntaje = f" - Puntaje: {diag.puntaje}/3" if diag else " - Sin diagn√≥stico"
                    respuesta += f"‚Ä¢ {modulo.nombre}{puntaje}\n"
                
                respuesta += "\n**Acci√≥n recomendada**:\n"
                respuesta += "1. üìñ Revisa el contenido del m√≥dulo\n"
                respuesta += "2. üß™ Realiza el diagn√≥stico inicial\n" 
                respuesta += "3. üîÑ Practica con ejercicios pr√°cticos\n"
                respuesta += "4. üìä Vuelve a evaluar tu progreso\n\n"
            
            if modulos_media:
                respuesta += f"üìà **√Åreas para fortalecer (Prioridad media)**:\n"
                for modulo in modulos_media:
                    diag = diagnosticos.filter(modulo=modulo).first()
                    puntaje = f" - Puntaje: {diag.puntaje}/3" if diag else " - Sin diagn√≥stico"
                    respuesta += f"‚Ä¢ {modulo.nombre}{puntaje}\n"
                
                respuesta += "\n**Sugerencia**: Puedes repasar estos temas cuando tengas tiempo disponible.\n\n"
            
            if not modulos_alta and not modulos_media:
                respuesta += "¬°Excelente! üéâ No tienes √°reas cr√≠ticas que mejorar. "
            
            respuesta += "¬øQuieres que te explique alg√∫n tema espec√≠fico o necesitas m√°s detalles sobre alg√∫n m√≥dulo?"
            
            return respuesta
        else:
            return "ü§î **Para conocer tus √°reas a mejorar**, realiza los diagn√≥sticos de los m√≥dulos. Cada diagn√≥stico te dar√° recomendaciones personalizadas basadas en tus resultados.\n\n¬øQuieres intentar con alg√∫n m√≥dulo en particular?"
        
    # ===== 3.1 QU√â ESTUDIAR - RECOMENDACIONES DE ESTUDIO =====
    if any(palabra in pregunta_lower for palabra in ['qu√© debo estudiar', 'qu√© estudiar', 'qu√© aprender', 'por d√≥nde empezar', 'recomi√©ndame', 'qu√© m√≥dulo', 'cu√°l m√≥dulo']):
        from cursos.utils import obtener_ruta_aprendizaje
        from evaluaciones.models import DiagnosticoInicial
        from certificados.models import Certificado
        
        # Obtener m√≥dulos completados
        modulos_completados = Certificado.objects.filter(usuario=usuario).values_list('modulo_id', flat=True)
        
        # Obtener diagn√≥sticos realizados
        diagnosticos_realizados = DiagnosticoInicial.objects.filter(usuario=usuario, completado=True).values_list('modulo_id', flat=True)
        
        # Obtener ruta de aprendizaje personalizada
        ruta_aprendizaje = obtener_ruta_aprendizaje(usuario)
        
        if ruta_aprendizaje:
            # Filtrar m√≥dulos no completados y con alta prioridad
            modulos_recomendados = [
                r.modulo_recomendado for r in ruta_aprendizaje 
                if r.modulo_recomendado.id not in modulos_completados
            ]
            
            if modulos_recomendados:
                respuesta = "üéØ **Basado en tu progreso, te recomiendo estudiar**:\n\n"
                
                for i, modulo in enumerate(modulos_recomendados[:3], 1):
                    estado = "‚ö†Ô∏è **CR√çTICO**" if modulo.id in diagnosticos_realizados else "üìö **NUEVO**"
                    respuesta += f"{i}. **{modulo.nombre}** - {estado}\n"
                    respuesta += f"   ‚Ä¢ {modulo.descripcion}\n"
                    respuesta += f"   ‚Ä¢ Duraci√≥n: {modulo.duracion_estimada}\n\n"
                
                respuesta += "üí° **Sugerencia**: Comienza por el m√≥dulo marcado como ‚ö†Ô∏è CR√çTICO si necesitas mejorar, o por üìö NUEVO para aprender algo diferente."
                
                return respuesta
        
        # Si no hay ruta de aprendizaje personalizada, sugerir m√≥dulos generales
        from cursos.models import Modulo
        modulos_disponibles = Modulo.objects.exclude(id__in=modulos_completados)
        
        if modulos_disponibles:
            respuesta = "üìö **Te recomiendo estos m√≥dulos disponibles**:\n\n"
            for i, modulo in enumerate(modulos_disponibles[:4], 1):
                respuesta += f"{i}. **{modulo.nombre}**\n"
                respuesta += f"   ‚Ä¢ {modulo.descripcion}\n"
                respuesta += f"   ‚Ä¢ Nivel: {modulo.get_nivel_dificultad_display()}\n\n"
            
            respuesta += "‚ú® **Consejo**: Si no est√°s seguro por d√≥nde empezar, realiza el diagn√≥stico inicial de cualquier m√≥dulo para obtener recomendaciones personalizadas."
            
            return respuesta
        else:
            return "üéâ **¬°Felicidades!** Has completado todos los m√≥dulos disponibles. ¬øTe gustar√≠a repasar alg√∫n tema espec√≠fico o profundizar en lo que ya aprendiste?"
    
    # ===== 3.2 PLAN DE ESTUDIO PERSONALIZADO =====
    if any(palabra in pregunta_lower for palabra in ['plan de estudio', 'plan de estudios', 'organizar estudio', 'c√≥mo organizarme', 'rutina de estudio']):
        from cursos.models import Modulo
        from certificados.models import Certificado
        
        modulos_completados = Certificado.objects.filter(usuario=usuario).count()
        modulos_totales = Modulo.objects.count()
        progreso = (modulos_completados / modulos_totales * 100) if modulos_totales > 0 else 0
        
        respuesta = f"üìä **Tu progreso actual**: {modulos_completados}/{modulos_totales} m√≥dulos ({progreso:.1f}%)\n\n"
        respuesta += "üéØ **Plan de estudio recomendado**:\n\n"
        respuesta += "1. **Sesiones cortas** (25-30 minutos) con descansos de 5 minutos\n"
        respuesta += "2. **Consistencia** > Intensidad: Mejor 30 min/d√≠a que 3 horas un d√≠a\n"
        respuesta += "3. **Orden sugerido**:\n"
        respuesta += "   - Lunes: Seguridad Digital üîí\n"
        respuesta += "   - Martes: Word üìù\n"
        respuesta += "   - Mi√©rcoles: Excel üìä\n"
        respuesta += "   - Jueves: PowerPoint üéØ\n"
        respuesta += "   - Viernes: Comunicaci√≥n Digital üìß\n"
        respuesta += "   - Fin de semana: Repaso y pr√°ctica\n\n"
        respuesta += "üí° **Tips adicionales**:\n"
        respuesta += "‚Ä¢ Establece metas diarias realistas\n"
        respuesta += "‚Ä¢ Practica inmediatamente lo aprendido\n"
        respuesta += "‚Ä¢ Ense√±a a alguien m√°s para reforzar\n"
        respuesta += "‚Ä¢ Usa los diagn√≥sticos para medir tu avance\n\n"
        respuesta += "¬øTe gustar√≠a que personalice m√°s este plan seg√∫n tu disponibilidad de tiempo?"
        
        return respuesta
    
    # ===== 4. M√ìDULOS COMPLETADOS Y CERTIFICADOS =====
    if any(palabra in pregunta_lower for palabra in ['completado', 'terminado', 'hecho', 'finalizado', 'certificado', 'diploma']):
        from certificados.models import Certificado
        certificados = Certificado.objects.filter(usuario=usuario)
        
        if certificados:
            modulos = [f"{cert.modulo.nombre} ({cert.puntaje_final}/3)" for cert in certificados]
            return f"üèÜ **M√≥dulos completados**:\n{chr(10).join(['‚Ä¢ ' + modulo for modulo in modulos])}\n\n¬°Felicidades! ¬øQuieres seguir con otro m√≥dulo o reforzar lo aprendido?"
        else:
            return "üìö **A√∫n no tienes m√≥dulos completados**. Para obtener un certificado:\n1. Estudia el m√≥dulo\n2. Realiza el diagn√≥stico\n3. Obt√©n 2/3 o m√°s\n4. Ve a 'Obtener Certificado'\n\n¬øPor cu√°l m√≥dulo quieres empezar?"
    
    # ===== 5. PUNTAJES Y RESULTADOS =====
    if any(palabra in pregunta_lower for palabra in ['puntaje', 'calificaci√≥n', 'nota', 'resultado', 'cu√°nto saqu√©']):
        from evaluaciones.models import DiagnosticoInicial
        diagnosticos = DiagnosticoInicial.objects.filter(usuario=usuario, completado=True).order_by('-fecha')
        
        if diagnosticos:
            respuesta = "üìä **Tus resultados recientes**:\n"
            for diagnostico in diagnosticos[:5]:
                emoji = "‚úÖ" if diagnostico.puntaje >= 2 else "‚ö†Ô∏è"
                respuesta += f"{emoji} {diagnostico.modulo.nombre}: {diagnostico.puntaje}/3\n"
            
            if any(d.puntaje < 2 for d in diagnosticos):
                respuesta += "\nüí° **Consejo**: Los m√≥dulos con ‚ö†Ô∏è necesitan repaso. ¬øQuieres mejorar alg√∫n puntaje?"
            else:
                respuesta += "\nüéâ **¬°Excelente trabajo!** Todos tus resultados son s√≥lidos."
            
            return respuesta
        else:
            return "üìù **A√∫n no tienes resultados**. Realiza el diagn√≥stico de alg√∫n m√≥dulo para:\n‚Ä¢ Conocer tu nivel actual\n‚Ä¢ Obtener recomendaciones\n‚Ä¢ Identificar √°reas de mejora\n\n¬øQuieres intentar con alg√∫n m√≥dulo?"
    
    # ===== 6. C√ìMO FUNCIONA LA PLATAFORMA =====
    if any(palabra in pregunta_lower for palabra in ['c√≥mo funciona', 'usar', 'utilizar', 'qu√© hago', 'por d√≥nde']):
        return "üõ†Ô∏è **Gu√≠a r√°pida de la plataforma**:\n\n1. **M√≥dulos**: Estudia el contenido de cada tema\n2. **Diagn√≥stico**: Eval√∫a tu conocimiento (3 preguntas)\n3. **Resultado**: Obt√©n tu puntaje y recomendaciones\n4. **Certificado**: Cons√≠guelo al aprobar (2/3 o m√°s)\n5. **Progreso**: Ve tu avance general\n6. **Tutor IA**: Preg√∫ntame cualquier duda\n\n¬øNecesitas ayuda con algo espec√≠fico?"
    
    # ===== 7. EXPLICACI√ìN DE CONTENIDOS =====
    # SEGURIDAD DIGITAL
    if any(palabra in pregunta_lower for palabra in ['seguridad', 'contrase√±a', 'password', 'phishing', 'hacker', 'virus', 'malware']):
        return "üîí **Seguridad Digital - Conceptos clave**:\n\n‚Ä¢ **Contrase√±as seguras**: M√≠nimo 8 caracteres, mezcla may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos. No reutilices contrase√±as.\n\n‚Ä¢ **Phishing**: Emails falsos que buscan robar informaci√≥n. Se√±ales: urgencia, errores gramaticales, enlaces sospechosos.\n\n‚Ä¢ **Autenticaci√≥n en dos factores**: Capa extra de seguridad adem√°s de la contrase√±a.\n\n¬øQuieres profundizar en alg√∫n tema espec√≠fico de seguridad?"
    
    # OFIM√ÅTICA
    if any(palabra in pregunta_lower for palabra in ['word', 'documento', 'texto', 'ofim√°tica', 'office']):
        return "üìù **Microsoft Word - Lo esencial**:\n\n‚Ä¢ **Formato profesional**: Estilos de texto, numeraci√≥n, vi√±etas\n‚Ä¢ **Estructura**: Portada, √≠ndice, encabezados, pie de p√°gina\n‚Ä¢ **Elementos**: Tablas, im√°genes, gr√°ficos, hiperv√≠nculos\n‚Ä¢ **Revisi√≥n**: Ortograf√≠a, gram√°tica, dise√±o coherente\n\n¬øNecesitas ayuda con alguna funci√≥n espec√≠fica de Word?"
    
    if any(palabra in pregunta_lower for palabra in ['excel', 'hoja de c√°lculo', 'f√≥rmula', 'tabla', 'gr√°fico']):
        return "üìä **Microsoft Excel - Poder en datos**:\n\n‚Ä¢ **F√≥rmulas b√°sicas**: SUMA, PROMEDIO, CONTAR, SI\n‚Ä¢ **Formato**: Celdas, bordes, colores condicionales\n‚Ä¢ **Gr√°ficos**: Barras, l√≠neas, tortas para visualizar datos\n‚Ä¢ **Organizaci√≥n**: Filtros, ordenamiento, tablas din√°micas\n\n¬øQu√© te gustar√≠a aprender de Excel?"
    
    if any(palabra in pregunta_lower for palabra in ['powerpoint', 'presentaci√≥n', 'diapositiva', 'slides']):
        return "üéØ **Microsoft PowerPoint - Presentaciones impactantes**:\n\n‚Ä¢ **Estructura**: Portada, introducci√≥n, desarrollo, conclusi√≥n\n‚Ä¢ **Dise√±o**: Plantillas profesionales, colores, fuentes\n‚Ä¢ **Animaciones**: Transiciones sutiles, efectos de entrada\n‚Ä¢ **Consejo**: Menos texto, m√°s im√°genes. M√°ximo 6 l√≠neas por diapositiva\n\n¬øPreparando una presentaci√≥n?"
    
    # COMUNICACI√ìN DIGITAL
    if any(palabra in pregunta_lower for palabra in ['email', 'correo', 'comunicaci√≥n', 'redacci√≥n', 'profesional']):
        return "üìß **Comunicaci√≥n Digital Efectiva**:\n\n‚Ä¢ **Asunto**: Claro y espec√≠fico (ej: 'Informe mensual - Abril 2024')\n‚Ä¢ **Saludo**: Formal ('Estimado Sr./Sra.')\n‚Ä¢ **Cuerpo**: P√°rrafos cortos, ideas claras, prop√≥sito evidente\n‚Ä¢ **Despedida**: Cort√©s ('Quedo atento a sus comentarios')\n‚Ä¢ **Firma**: Nombre, cargo, contacto\n\n¬øTienes dudas sobre c√≥mo redactar alg√∫n tipo de comunicaci√≥n?"
    
    # ===== 8. MOTIVACI√ìN Y APRENDIZAJE =====
    if any(palabra in pregunta_lower for palabra in ['dif√≠cil', 'complicado', 'no entiendo', 'no puedo', 'frustrado']):
        return "üòä **¬°Tranquilo/a! El aprendizaje es un proceso**:\n\n‚Ä¢ **Paso a paso**: No intentes aprender todo de una vez\n‚Ä¢ **Practica**: La repetici√≥n consolida el conocimiento\n‚Ä¢ **Descansa**: Tomar pausas mejora la retenci√≥n\n‚Ä¢ **Pide ayuda**: Yo estoy aqu√≠ para apoyarte\n\n¬øQu√© tema espec√≠fico se te est√° haciendo dif√≠cil?"
    
    if any(palabra in pregunta_lower for palabra in ['consejo', 'tip', 'recomienda', 'sugerencia', 'truco']):
        return "üí° **Consejos para aprender mejor**:\n\n1. **Establece metas peque√±as** (ej: 'hoy estudio 30 minutos')\n2. **Practica regularmente** (mejor 15 min diarios que 2 horas semanales)\n3. **Ense√±a a otros** (explicar consolida tu aprendizaje)\n4. **Toma notas** a mano (mejora la retenci√≥n)\n5. **Relaciona con tu trabajo** (hazlo pr√°ctico y relevante)\n\n¬øNecesitas alg√∫n consejo espec√≠fico?"
    
    # ===== 9. PREGUNTAS SOBRE EL TUTOR IA =====
    if any(palabra in pregunta_lower for palabra in ['qui√©n eres', 'qu√© eres', 'tutor', 'ia', 'inteligencia artificial']):
        return "ü§ñ **Soy tu Tutor IA**:\n\n‚Ä¢ **Mi prop√≥sito**: Ayudarte en tu proceso de aprendizaje\n‚Ä¢ **Puedo**: Explicar temas, revisar tu progreso, dar consejos\n‚Ä¢ **No puedo**: Hacer los diagn√≥sticos por ti (esa parte te toca üòâ)\n‚Ä¢ **Mi conocimiento**: Competencias digitales, ofim√°tica, seguridad\n\n¬øEn qu√© m√°s puedo asistirte?"
    
    # ===== 10. RESPUESTA POR DEFECTO INTELIGENTE =====
    sugerencias = [
        "Puedo explicarte temas de: Seguridad digital, Word, Excel, PowerPoint o Comunicaci√≥n profesional",
        "¬øQuieres saber tu progreso actual o √°reas que necesitas mejorar?",
        "¬øNecesitas consejos para aprender mejor o preparar una presentaci√≥n?",
        "Puedo ayudarte con: resultados de diagn√≥sticos, m√≥dulos completados, o c√≥mo usar la plataforma",
        "¬øTienes dudas sobre contrase√±as seguras, redacci√≥n de emails o uso de Excel?"
    ]
    
    import random
    return f"ü§î **No estoy seguro de entenderte completamente.**\n\n{random.choice(sugerencias)}\n\n¬øPuedes reformular tu pregunta o elegir alguna de estas opciones?"

